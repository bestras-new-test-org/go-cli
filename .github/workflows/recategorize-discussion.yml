# This is a basic workflow that is manually triggered

name: Recategorize labeled discussions

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      label:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Label for discussions that will be recategorized'
        # Default value if no value is explicitly provided
        default: 'bug'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      category:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'The name of the category the labeled discussions will be moved to'
        # Default value if no value is explicitly provided
        default: 'Ideas'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  recategorize-discussions:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Send greeting
      run: echo "Moving Discussions labeled ${{ inputs.label }} to category ${{  inputs.category }}"
    # Use the graphql search api to find all discussions with the label using the search() query
    - name: Find labeled discussions
      run: |
        searchQuery="label:${{ inputs.label }} repo:${{ github.repository}}"
        discussions="$(gh api graphql -F queryString="$searchQuery" -f query='
          query($queryString: String!) {
            search(query:$queryString,type:DISCUSSION,first:100){
              nodes{
                ...on Discussion{id}
              }
            }
          }' | jq -r '.data.search.nodes[].id')"
        echo 'Found discussions: '"$discussions"
        echo 'DISCUSSIONS_TO_TRANSEFER='$discussions >> $GITHUB_ENV
    - name: Find the id of the discussion category in the current repository
      run: |
        category=$(gh api graphql -f query='
          query{
            repository(owner:"${{ github.repository_owner }}",name:"${{ github.repository.name }}"){
              discussionCategories(first:100){
                nodes{
                  id
                  name
                }
              }
            }
          }' | jq -r --arg category "${{ inputs.category }}" '.data.repository.discussionCategories.nodes[] | select(.name==$category) | .id')
        echo 'CATEGORY_ID='$category >> $GITHUB_ENV
    - name: Dryrun
      run: |
        echo "Dryrun"
        echo "DISCUSSIONS_TO_TRANSEFER=$DISCUSSIONS_TO_TRANSEFER"
        echo "CATEGORY_ID=$CATEGORY_ID"

